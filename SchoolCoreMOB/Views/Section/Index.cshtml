@model IEnumerable<VPersonnelAttendenceBenchmark>
@using Localization.Services
@inject LanguageService _localization
@inject IConfiguration Configuration
@inject IHttpContextAccessor HttpContextAccessor
@{
    string strtoken = @HttpContextAccessor.HttpContext.Session.GetString("strtoken");
    string userParamkey = @HttpContextAccessor.HttpContext.Session.GetString("UserParam");
}

<div class="page-title page-title-small">
    <h2><a href="#" data-back-button><i class="fa fa-arrow-left"></i></a>Sections Time Table</h2>
</div>


<div class="content mb-0">
    <div class="input-style has-borders input-style-always-active no-icon mb-4">
        <select id="sectionpersonnel-dropdown">
            <option value="default" disabled>Select Section</option>
        </select>
        <span><i class="fa fa-chevron-down"></i></span>
        <i class="fa fa-check disabled valid color-green-dark"></i>
        <i class="fa fa-check disabled invalid color-red-dark"></i>
        <em></em>
    </div>
</div>
<div class="content mb-2">
    <div id="weekday-container" style="display: flex; justify-content: space-between; align-items: stretch;">
    </div>
</div>

<div id="period-container" style="margin-top:10px">
</div>

<script src="~/scripts/jquery/jquery.min.js"></script>
<script>
     let periodArr=[];
        let timeTableArr=[];
                   $(document).ready(function () {
                       setActiveNav("@Url.Action("Index", "Home")");
                       getSectionsByPersonnelId();

                   });
    function getSectionsByPersonnelId() {
                      showLoading();

                        getOperation('@Configuration["WebApi:ClientBaseUrl"]' + `/api/Section/MbSection`,`@strtoken`,`@Html.Raw(@userParamkey)`)
                                .then(response => {
                                     setSectionPersonnelBinding(response);
                                      hideLoading();
                                })
                                .catch(error => {
                                     showToast('2', error);
                                });
    }

    function setSectionPersonnelBinding(data) {
        const dropdown = $('#sectionpersonnel-dropdown');
        dropdown.empty();
        dropdown.append('<option value="">Select Section</option>');
        data.forEach(card => {
            const option = $('<option></option>')
                .val(card.id)
                .text(card.classSectionName);
            dropdown.append(option);
        });
         var defaultValue = data[0].id;
        dropdown.val(defaultValue);
        getSectionTransTimeTableById(defaultValue);

        dropdown.on('change', function() {
            const selectedId = $(this).val();
            if (selectedId) {
                $('#weekday-container').empty();
                $('#period-container').empty();
                getSectionTransTimeTableById(selectedId);
            }
            else{
                $('#weekday-container').empty();
                $('#period-container').empty();
            }
        });
    }

        function getSectionTransTimeTableById(id) {
                       showLoading();
                       getOperation('@Configuration["WebApi:ClientBaseUrl"]' + `/api/Section/TransTimeTable/`+id+``,`@strtoken`,`@Html.Raw(@userParamkey)`)
                                .then(response => {

                                     getOperation('@Configuration["WebApi:ClientBaseUrl"]' + `/api/Section/MbTimeTable/`+id+``,`@strtoken`,`@Html.Raw(@userParamkey)`)
                                        .then(childresponse => {                                           
                                            if(childresponse !== null && childresponse.length > 0){
                                                 timeTableArr = childresponse;
                                                 periodArr = response.castTransTimetable.periods;
                                                 setWeekdayBinding(response.castTransTimetable.weekdays);
                                            }                                   

                                             hideLoading();
                                        })
                                        .catch(error => {
                                             showToast('2', `@_localization.Getkey("Error")`);
                                        });

                                })
                                .catch(error => {
                                     showToast('2', `@_localization.Getkey("Error")`);
                                });
         }
        function setWeekdayBinding(data){
                  $('#weekday-container').empty();
                 const container = document.getElementById('weekday-container');
                  data.forEach(card => {
                      const div = document.createElement('div');
                      div.className = 'weekdaycard';
                    //  div.setAttribute('data-value', card.id);
                      div.textContent = card.name;
                     // Add click event listener
                      div.addEventListener('click', () => {
                              const selectedCard = container.querySelector('.weekdaycard.selected');
                              if (selectedCard) {
                                  selectedCard.classList.remove('selected');
                              }
                              div.classList.add('selected');
                              setPeriodBinding(card.name);
                      });
                      container.appendChild(div);
                  });

                   // Automatically select the card based on today's weekday
                    const todayWeekdayName = getTodayWeekdayName();  // Get today's weekday
                    const weekdayCards = container.querySelectorAll('.weekdaycard');
                    weekdayCards.forEach(card => {
                        if (card.textContent === todayWeekdayName) {
                            card.classList.add('selected');  // Manually add selected class
                            setPeriodBinding(card.textContent);  // Call setTeacherPeriodBinding directly after selecting the card
                        }
                    });

        }
        function setPeriodBinding(weekname){
            $('#period-container').empty();
            var dayInt = getDayOfWeekInt(weekname);
            let selected = timeTableArr.filter(item => item.dayOfWeek === dayInt);
             var anchors = "";
                if (selected.length === 0) {
                    anchors = `
                        <div>
                            <p>No data available</p>
                        </div>`;
                }
                else{
                    for (var i = 0; i < periodArr.length; i++){
                       var breakOrPeriod = periodArr[i].isBreak
                      ? periodArr[i].description
                      : selected.filter(item => item.fromTime === periodArr[i].startTime && item.toTime === periodArr[i].endTime)[0]?.subjectActivityName ?? '';

                        var personName = periodArr[i].isBreak
                          ? ''
                          : selected.filter(item => item.fromTime === periodArr[i].startTime && item.toTime === periodArr[i].endTime)[0]?.personnelName ?? '';

                                 anchors+=`<a href="#" class="card card-style mb-2 custom-card rounded-2">
                                            <div class="d-flex pt-2 pb-2">
                                                <!-- Badges Container: Align badges to the left -->
                                                <div class="d-flex flex-column justify-content-center ps-3">
                                                    <span class="badge bg-highlight color-white font-xl py-2 px-3 mb-1">` + periodArr[i].startTime.substring(0, 5) +`</span>
                                                    <span class="badge bg-info color-white font-xl py-2 px-3">` + periodArr[i].endTime.substring(0, 5) +`</span>
                                                </div>

                                                <!-- Content Section: Center align the content in the remaining space -->
                                                 <div class="d-flex flex-column justify-content-center ms-3">
                                                        <h5 class="color-theme font-600 text-start">` + breakOrPeriod + `</h5>
                                                        <p class="mt-n1 font-10 color-highlight mb-1 text-start">` + personName + `</p>
                                                    </div>
                                            </div>
                                        </a>`;
                    }

                }
           $('#period-container').append(anchors);
        }



        //function getSectionTransTimeTableById1(id) {
        //               showLoading();
        //               getOperation('@Configuration["WebApi:ClientBaseUrl"]' + `/api/Section/TransTimeTable/`+id+``,`@strtoken`,`@Html.Raw(@userParamkey)`)
        //                        .then(response => {
        //                            var result =response;
        //                              // Populate header
        //                              $('#transtimetable-header').empty();
        //                              if (result.castTransTimetable.periods != null && result.castTransTimetable.periods.length > 0) {
        //                                  var headerRow = '<tr><th>Period</th>'; // First column is "Time Slot"
        //                                  result.castTransTimetable.weekdays.forEach(function (day) {
        //                                      headerRow += '<th>' + day.name + '</th>';
        //                                  });
        //                                  headerRow += '</tr>';
        //                                  $('#transtimetable-header').append(headerRow);
        //                              }
        //                               // Populate body
        //                              $('#transtimetable-body').empty();
        //                               if(result.castTransTimetable.periods !=null && result.castTransTimetable.periods.length > 0)
        //                               {
        //                                   for (var i = 0; i < result.castTransTimetable.periods.length; i++){
        //                                       var day = result.castTransTimetable.periods[i];

        //                                        var row = '<tr><td>'+ day.startTime.substring(0, 5) + ' - ' + day.endTime.substring(0, 5) + '</td>';
        //                                        for (var j = 0; j < result.castTransTimetable.weekdays.length; j++){
        //                                            var slot = result.castTransTimetable.weekdays[j];


        //                                                  if (day.isBreak) {
        //                                                      // Only render the cell for the first weekday to apply colspan
        //                                                      if (j == 0)
        //                                                      {
        //                                                           row += '<td class="lunch" colspan="' + result.castTransTimetable.weekdays.length + '">' + day.description + '</td>';
        //                                                      }
        //                                                  }
        //                                                  else {
        //                                                    var strdesc='';
        //                                                          row += '<td class="drop" data-day="' + slot.name +
        //                                              '" data-starttime="' + day.startTime +
        //                                              '" data-endtime="' + day.endTime + '">' +
        //                                                             strdesc + '</td>';

        //                                                      }
        //                                        }
        //                                      row += '</tr>';
        //                                       $('#transtimetable-body').append(row);
        //                                   }
        //                               }
        //                            //  getSectionTimeTableFromDB(id);
        //                        })
        //                        .catch(error => {
        //                             showToast('2', `@_localization.Getkey("Error")`);
        //                        });
        // }
        //function getSectionTimeTableFromDB1(id) {
        //      getOperation('@Configuration["WebApi:ClientBaseUrl"]' + `/api/Section/MbTimeTable/`+id+``,`@strtoken`,`@Html.Raw(@userParamkey)`)
        //                        .then(response => {
        //                            $.each(response, function (key, value) {

        //                                           var strday = getShortDayOfWeekString(value.dayOfWeek);
        //                                           var displayText = value.subjectActivityName ;  //+ ' - ' +value.personnelName
        //                                          let cell = $('td[data-day="' + strday + '"][data-starttime="' + value.fromTime + '"][data-endtime="' + value.toTime + '"]');
        //                                           // Fill the cell with the subject if it exists
        //                                           if (cell.length) {
        //                                               cell.html('<div class="item assigned" style="background-color: '+value.subjectActivityColor+';">'+displayText+'</div>');
        //                                           }
        //                                       });
        //                                       // setfooterActiveAfterNavigation();
        //                                       settimeTableBindingValues(response);
        //                                         hideLoading();
        //                        })
        //                        .catch(error => {
        //                             showToast('2', `@_localization.Getkey("Error")`);
        //                        });
        // }
        //function settimeTableBindingValues1(data){
        //          $('#classtimetable-container').empty();
        //          const distinctPairs = data.map(item => [item.subjectActivityName, item.personnelName])
        //                  .filter((value, index, self) =>
        //                      index === self.findIndex((t) => (
        //                          t[0] === value[0] && t[1] === value[1]
        //                      ))
        //                  );

        //             var anchors = "";
        //             distinctPairs.forEach(pair => {
        //                 anchors += `<a href="#"><i class="fa fa-calendar-alt color-blue-dark"></i> <span> ` + pair[0] + ' - ' + pair[1] + `</span></a>`;
        //            });
        //            $('#classtimetable-container').append(anchors);
        // }
        //function setSectionPersonnelBinding1(data){
        //          $('#sectionpersonnel-container').empty();
        //         const container = document.getElementById('sectionpersonnel-container');
        //          data.forEach(card => {
        //              const div = document.createElement('div');
        //              div.className = 'sectioncard';
        //              div.setAttribute('data-value', card.id);
        //              div.textContent = card.classSectionName;
        //              div.addEventListener('click', () => {
        //                      const selectedCard = container.querySelector('.sectioncard.selected');
        //                      if (selectedCard) {
        //                          selectedCard.classList.remove('selected');
        //                      }
        //                      div.classList.add('selected');

        //                      getSectionTransTimeTableById(card.id);
        //              });
        //              container.appendChild(div);
        //          });
        //}





</script>
