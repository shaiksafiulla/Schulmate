@model SchoolCoreWEB.Models.Student
@using Localization.Services
@inject LanguageService _localization
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@using Newtonsoft.Json
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@{
    string struserid = string.Empty;
    string strtoken;
    //string _userparam = @HttpContextAccessor.HttpContext.Session.GetString("UserParam");
    string userParamkey = @HttpContextAccessor.HttpContext.Session.GetString("UserParam");
    var userInfokey = @HttpContextAccessor.HttpContext.Session.GetString("UserInfo");
    if (userInfokey != null)
    {
        var userInfo = JsonConvert.DeserializeObject<VUserInfo>(userInfokey);
        struserid = userInfo.Id.ToString();
    }
    strtoken = @HttpContextAccessor.HttpContext.Session.GetString("strtoken");
}

<form id="studentForm" class="forms-sample">

    @Html.HiddenFor(m => m.Id)
    @Html.HiddenFor(m => m.PersonnelType)
    @Html.HiddenFor(m => m.StudentAdmission.SessionYearId)
    @Html.HiddenFor(m => m.BranchId, new { @id = "hfbranchid" })
    @Html.HiddenFor(m => m.BranchClassId)
    <div class="row">
        <div class="col-8">
            <div class="card ribbon-box">
                <div class="card-body">
                    <div class="ribbon ribbon-info float-start"><i class="mdi mdi-access-point me-1"></i> @_localization.Getkey("BasicInfo")</div>
                    <div class="ribbon-content">
                        <div class="row">
                            <div class="col-6">
                                <div class="form-group required mb-3">
                                    <label for="firstName" class="form-label">@_localization.Getkey("FirstName")</label>
                                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control form-control-sm", @id = "firstName", @required = "required", @maxlength = "50", onkeyup = "Validate();" })
                                </div>
                                <div class="form-group required mb-3">
                                    <label for="lastName" class="form-label">@_localization.Getkey("LastName")</label>
                                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control form-control-sm", @id = "lastName", @required = "required", @maxlength = "50", onkeyup = "Validate();" })
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group mb-3">
                                    <img id="emp_img" src="@(Model.FilePath)" alt="@_localization.Getkey("AltProfileImage")" width="200" height="100" />
                                    <div class="input-group">
                                        <input type="file" id="photo" name="postedFile1" accept="image/*" class="form-control" onchange="uploadFile(2,1,this)">
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <div class="form-group required mb-3">
                                    <label for="startdate" class="form-label">@_localization.Getkey("DateOfBirth")</label>
                                    @Html.EditorFor(model => model.DateOfBirth, "{0:dd-MM-yyyyTHH:mm:ss}", new { htmlAttributes = new { @type = "date", @class = "form-control form-control-sm datetimepicker", @required = "required", @id = "dateofbirth", onChange = "Validate();" } })
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="form-group mb-3">
                                    <label class="form-label">@_localization.Getkey("Gender")</label>
                                    @Html.RadioButtonFor(model => model.Gender, "1", new { @class = "form-check-input" }) <label>@_localization.Getkey("Male")</label> &nbsp;
                                    @Html.RadioButtonFor(model => model.Gender, "2", new { @class = "form-check-input" })  <label>@_localization.Getkey("Female")</label>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-6">
                                <div class="form-group mb-3">
                                    <label for="class" class="form-label">@_localization.Getkey("BloodGroup")</label>
                                    @Html.DropDownListFor(model => model.BloodGroupId, Model.BloodGroupSheet, "Please select", new { @class = "form-select form-select-sm", @id = "ddlbloodgroup", onChange = "selectedBloodGroupIndexChanged()" })
                                </div>
                            </div>
                           
                        </div>                       
                    </div>
                </div>
            </div>
            <div class="card ribbon-box">
                <div class="card-body">
                    <div class="ribbon ribbon-info float-start"><i class="mdi mdi-access-point me-1"></i> @_localization.Getkey("Admission")</div>
                    <div class="ribbon-content">
                        <div class="row">
                            <div class="col-4">
                                <div class="form-group required mb-3">
                                    <label for="class" class="form-label">@_localization.Getkey("Class")</label>
                                    @if (Model.Id > 0 && Model.ClassId > 0)
                                    {
                                        @Html.DropDownListFor(model => model.ClassId, Model.ClassSheet, "Please select", new { @class = "form-select form-select-sm", @id = "ddlclass", @required = "required", @disabled = "disabled" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.ClassId, Model.ClassSheet, "Please select", new { @class = "form-select form-select-sm", @id = "ddlclass", @required = "required", onChange = "selectedClassIndexChanged()" })
                                    }
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="form-group required mb-3">
                                    <label for="class" class="form-label">@_localization.Getkey("Section")</label>
                                    @if (Model.Id > 0 && Model.SectionId > 0)
                                    {
                                        @Html.DropDownListFor(model => model.SectionId, Model.SectionSheet, "Please select", new { @class = "form-select form-select-sm", @id = "ddlsection", @required = "required", @disabled = "disabled" })
                                    }
                                    else
                                    {
                                        @Html.DropDownListFor(model => model.SectionId, Model.SectionSheet, "Please select", new { @class = "form-select form-select-sm", @id = "ddlsection", @required = "required", onChange = "selectedSectionIndexChanged()" })
                                    }
                                </div>
                            </div>
                            <div class="col-4">
                                <div class="form-group required mb-3">
                                    <label for="admissiondate" class="form-label">@_localization.Getkey("AdmissionDate")</label>
                                    @if (Model.Id > 0 && Model.StudentAdmission.AdmissionDate != null)
                                    {
                                        @Html.EditorFor(model => model.StudentAdmission.AdmissionDate, "{0:dd-MM-yyyyTHH:mm:ss}", new { htmlAttributes = new { @type = "date", @class = "form-control form-control-sm datetimepicker", @id = "admissiondate", @disabled = "disabled" } })
                                    }
                                    else
                                    {
                                        @Html.EditorFor(model => model.StudentAdmission.AdmissionDate, "{0:dd-MM-yyyyTHH:mm:ss}", new { htmlAttributes = new { @type = "date", @required = "required", @class = "form-control form-control-sm datetimepicker", @id = "admissiondate", onChange = "Validate();" } })
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-4">
            <div class="card ribbon-box">
                <div class="card-body">
                    <div class="ribbon ribbon-info float-start"><i class="mdi mdi-access-point me-1"></i> @_localization.Getkey("OtherDetails")</div>
                    <div class="ribbon-content">
                        <div class="row">
                            <div class="form-group required mb-3">
                                <label for="mobileno" class="form-label">@_localization.Getkey("FatherName")</label>
                                @Html.TextBoxFor(model => model.StudentOtherDetail.FatherName, new { @class = "form-control form-control-sm", @id = "fathername", @maxlength = "100", onkeyup = "Validate();" })
                            </div>
                            <div class="form-group required mb-3">
                                <label for="mobileno" class="form-label">@_localization.Getkey("MotherName")</label>
                                @Html.TextBoxFor(model => model.StudentOtherDetail.MotherName, new { @class = "form-control form-control-sm", @id = "mothername", @maxlength = "100", onkeyup = "Validate();" })
                            </div>
                            <div class="form-group required mb-3">
                                <label for="mobileno" class="form-label">@_localization.Getkey("MobileNumber")</label>
                                @Html.TextBoxFor(model => model.StudentOtherDetail.DefaultMobileNo, new { @class = "form-control form-control-sm", @id = "mobileno", @maxlength = "10", onkeyup = "Validate();", @onkeypress = @"return event.charCode === 0 || /\d/.test(String.fromCharCode(event.charCode));" })
                            </div>
                            <div class="form-group mb-3">
                                <label for="mobileno" class="form-label">@_localization.Getkey("OtherMobileNumber")</label>
                                @Html.TextBoxFor(model => model.StudentOtherDetail.OtherMobileNo, new { @class = "form-control form-control-sm", @id = "othermobileno", @maxlength = "10", onkeyup = "Validate();", @onkeypress = @"return event.charCode === 0 || /\d/.test(String.fromCharCode(event.charCode));" })
                            </div>
                            <div class="form-group mb-3">
                                <label for="address" class="form-label">@_localization.Getkey("CurrentAddress")</label>
                                @Html.TextAreaFor(model => model.StudentOtherDetail.CurrentAddress, new { @class = "form-control form-control-sm", @id = "currentaddress", @rows = "2", onkeyup = "Validate();" })
                            </div>
                            <div class="form-group mb-3">
                                <label for="address" class="form-label">@_localization.Getkey("PermanentAddress")</label>
                                @Html.TextAreaFor(model => model.StudentOtherDetail.PermanentAddress, new { @class = "form-control form-control-sm", @id = "permanentaddress", @rows = "2", onkeyup = "Validate();" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-primary" id="btnsubmit" onclick="submitStudent()" disabled="disabled">
            @if (Model.Id > 0)
            {
                <span>@_localization.Getkey("Update")</span>
            }
            else
            {
                <span>@_localization.Getkey("Save")</span>
            }
        </button>
        <button type="button" class="btn btn-light" id="btncancel" onclick="cancel()">@_localization.Getkey("Cancel")</button>
    </div>
    <div class="three-quarters-loadermodel" id="loaderDiv1" style="display:none">
        <div class="loader">
            <div class="loader-inner line-scale">
                <div></div>
                <div></div>
                <div></div>
                <div></div>
                <div></div>
            </div>

        </div>
    </div>
</form>



<script type="text/javascript">

    function uploadFile(type, filetype, file) {
        if (validateuploadFile(type, filetype, file) == "") {
            $("#emp_img").attr("src", URL.createObjectURL(file.files[0]));
        }
        else {
            $("#emp_img").attr("src", "");
        }
    }


    function chkFields() {
        var isvalid = true;
        var validNumber = new RegExp(/^\d+$/);


        if ($('#firstName').val() === "") {
            isvalid = false;
        }
        if ($('#lastName').val() === "") {
            isvalid = false;
        }
        if ($('#fatherName').val() === "") {
            isvalid = false;
        }
        if ($('#motherName').val() === "") {
            isvalid = false;
        }
        if ($('#age').val() === "") {
            isvalid = false;
        }
        var mobile = $('#mobileno').val();
        if (mobile == "") {
            isvalid = false;
        }
        if (mobile != "" && !mobile.match(validNumber)) {
            isvalid = false;
        }
        var othermobile = $('#othermobileno').val();
        if (othermobile != "" && !othermobile.match(validNumber)) {
            isvalid = false;
        }
        if ($('#ddlclass').val() == "-1" || $('#ddlclass').val() == "") {
            isvalid = false;
        }
        if ($('#ddlsection').val() == "-1" || $('#ddlsection').val() == "") {
            isvalid = false;
        }
        if ($('#admissiondate').val() == "") {
            isvalid = false;
        }
        return isvalid;
    }

    function Validate() {
        if (chkFields()) {
            $('#btnsubmit').prop('disabled', false);
        }
        else {
            $('#btnsubmit').prop('disabled', true);
        }
    }
    // function selectedBranchIndexChanged() {
    //     $('#ddlclass')
    //         .find('option')
    //         .remove()
    //         .end()
    //         .append('<option value="-1">@_localization.Getkey("PleaseSelect")</option>')
    //         .val('-1');
    //     $.ajax({
    //         type: "post",
    //         url: '@Url.Action("GetClassesByBranch", "Student")',
    //         data: { branchId: $('#ddlbranch').val() },
    //         dataType: 'json',
    //         traditional: true,
    //         success: function (response) {
    //             var lst = response;
    //             var s = '<option value="-1">@_localization.Getkey("PleaseSelect")</option>';
    //             for (var i = 0; i < lst.length; i++) {
    //                 s += '<option value="' + lst[i].Value + '">' + lst[i].Text + '</option>';
    //             }
    //             $('.selectCat').selectpicker('destroy')
    //             $("#ddlclass").html(s);
    //             $('.selectCat').selectpicker({
    //                 liveSearch: true,
    //                 showSubtext: true
    //             });

    //         }
    //     });
    //     Validate();
    // }
    function selectedBloodGroupIndexChanged() {
        Validate();
    }
    function selectedClassIndexChanged() {
        $('#ddlsection')
            .find('option')
            .remove()
            .end()
            .append('<option value="-1">@_localization.Getkey("PleaseSelect")</option>')
            .val('-1');
        if ($('#hfbranchid').val() != "" & $('#ddlclass').val() != "") {
            $("#loaderDiv1").show("slow", function () {
                $.ajax({
                    type: "post",
                    url: '@Url.Action("GetSectionsByBranchAndClass", "Student")',
                    data: { branchId: $('#hfbranchid').val(), classId: $('#ddlclass').val() },
                    dataType: 'json',
                    traditional: true,
                    success: function (response) {
                        var lst = response;
                        var s = '<option value="-1">@_localization.Getkey("PleaseSelect")</option>';
                        for (var i = 0; i < lst.length; i++) {
                            s += '<option value="' + lst[i].value + '">' + lst[i].text + '</option>';
                        }
                        $("#ddlsection").html(s);
                        $("#loaderDiv1").hide();
                    }
                });
            })
        }

        Validate();
    }
    function selectedSectionIndexChanged() {
        Validate();
    }
    function submitStudent1() {
        $("#loaderDiv1").show("slow", function () {
            var studmodel = {};
            studmodel.Id = $('#hfstudid').val() === "" ? 0 : $('#hfstudid').val();
            studmodel.FirstName = $("#firstName").val();
            studmodel.LastName = $("#lastName").val();
            studmodel.Age = $("#age").val();

            studmodel.FatherName = $("#fatherName").val();
            studmodel.MotherName = $("#motherName").val();
            studmodel.Gender = $('[name="Gender"]:checked').val();
            studmodel.MobileNo = $("#mobileno").val();
            studmodel.AdmissionClassId = $("#ddladmissionclass").val();
            studmodel.SectionId = $("#ddlsection").val();
            studmodel.Address = $("#address").val();

            var photofile = $("input[name=postedFile1]")[0].files[0];
            if (photofile != null) {
                studmodel.FileName = $("input[name=postedFile1]")[0].files[0].name;
            }

            var formData = new FormData();
            formData.append("photofile", $("input[name=postedFile1]")[0].files[0]);
            formData.append("model", JSON.stringify(studmodel));

            $.ajax({
                type: 'POST',
                url: '@Url.Action("Save", "Student")',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response != null) {
                        var serviceresult = JSON.parse(response);
                        if (serviceresult === true) {
                            $("#loaderDiv1").hide();
                            toastr.error(`@_localization.Getkey("StudentExists")`);
                        }
                        else {
                            actionAfterResponse('StudentGrid', serviceresult.recordId, serviceresult.statusId, '6');
                        }

                    } else {
                        toastr.error(`@_localization.Getkey("Error")`);
                    }
                },
                error: function (response) {
                    toastr.error(`@_localization.Getkey("Error")`);
                    $("#loaderDiv").hide();

                }
            });
        })

    }
    
    function submitStudent() {

        $("#loaderDiv1").show("slow", function () {   
            var postData = new FormData($('#studentForm')[0]);
            postData.append("File", $("input[name=postedFile1]")[0].files[0]); // file
            $.ajax({
                type: 'POST',
                url: '@Configuration["WebApi:ClientBaseUrl"]' + '/api/Student/save',
                headers: {
                    'Authorization': 'Bearer ' + `@strtoken`,
                    'UserParam': `@Html.Raw(@userParamkey)`
                   },
                data: postData,
                cache: false,
                processData: false,
                contentType: false,
                //headers: {
                //    'Authorization': 'Bearer' + `@strtoken`,
                //    'UserParam': userparam
                //                                        },
                //data: postData,
                //cache: false,
                //processData: false,
                //contentType: false,
                success: function (response) {
                    if (response != null) {
                        var serviceresult = response;
                        actionAfterResponse('StudentGrid', serviceresult.recordId, serviceresult.statusId, '6');
                        // if (serviceresult === true) {
                        //     $("#loaderDiv1").hide();
                        //     toastr.error(`@_localization.Getkey("AdminExists")`);
                        // }
                        // else {

                        // }

                    } else {
                        toastr.error(`@_localization.Getkey("Error")`);

                    }
                },
                error: function (response) {
                    toastr.error(`@_localization.Getkey("Error")`);

                }
            });
        })

    }
    Validate();
</script>
