@model IEnumerable<VLeaveRequest>
@using Localization.Services
@inject LanguageService _localization
@inject IConfiguration Configuration
@inject IHttpContextAccessor HttpContextAccessor
@{
	string strtoken = @HttpContextAccessor.HttpContext.Session.GetString("strtoken");
	string userParamkey = @HttpContextAccessor.HttpContext.Session.GetString("UserParam");
}

<div class="card ribbon-box">
	<div class="card-body">
		<div class="ribbon ribbon-info float-start"><i class="mdi mdi-access-point me-1"></i> Teacher Evaluation</div>
		<input type="hidden" id="hfteacherperformscheduleid" />
		<div class="ribbon-content">
			<div class="row">
				<div class="d-flex align-items-center">
					<label for="duePercentSlider" class="form-label me-2">Select Examination</label>
					<select id="examination-dropdown" class="form-select form-select-sm">
						<option value="default" disabled>Select Examination</option>
					</select>
				</div>

			</div>
			<hr />
			<div class="row">
				<div id="performance-container">
				</div>
			</div>
		</div>
	</div>

	<div class="three-quarters-loadermodel" id="loaderDiv" style="display:none">
		<div class="loader">
			<div class="loader-inner line-scale">
				<div></div>
				<div></div>
				<div></div>
				<div></div>
				<div></div>
			</div>

		</div>
	</div>
</div>
@* <div class="page-title page-title-small">
    <h2><a href="#" data-back-button><i class="fa fa-arrow-left"></i></a>Caliber</h2>
</div>
<input type="hidden" id="hfteacherperformscheduleid"/>
<div class="content mb-0">
    <div class="input-style has-borders input-style-always-active no-icon mb-4">
        <select id="examination-dropdown">
            <option value="default" disabled>Select Examination</option>
        </select>
        <span><i class="fa fa-chevron-down"></i></span>
        <i class="fa fa-check disabled valid color-green-dark"></i>
        <i class="fa fa-check disabled invalid color-red-dark"></i>
        <em></em>
    </div>
</div>
<div id="performance-container">
</div> *@

@section Scripts {
	<script>
			$(document).ready(function () {

						getOperation('@Configuration["WebApi:ClientBaseUrl"]' + `/api/Schedule/PersonnelSchedule`,`@strtoken`,`@Html.Raw(@userParamkey)`)
								.then(response => {
									if(response.length > 0){
										setExaminationBinding(response);
									}
								})
								.catch(error => {
									console.log(error);
										 toastr.error(`@_localization.Getkey("Error")`);
								});

				});

			function setExaminationBinding(data) {
				const dropdown = $('#examination-dropdown');
				dropdown.empty();
				dropdown.append('<option value="">Select Examination</option>');
				data.forEach(card => {
					const option = $('<option></option>')
						.val(card.id)
						.text(card.title);
					dropdown.append(option);
				});
				 var defaultValue = data[0].id;
				 $("#hfteacherperformscheduleid").val(defaultValue);
				dropdown.val(defaultValue);
				//viewScheduleInfo(data[0]);
				getTeacherPeformance(data[0].id);
				//getSectionTransTimeTableById(defaultValue);

				dropdown.on('change', function() {
					const selectedId = $(this).val();
					if (selectedId) {
						var objsched = data.find(item=> item.id == selectedId);
						if(objsched !== null && objsched !==undefined){
							$("#hfteacherperformscheduleid").val(objsched.id);
							getTeacherPeformance(objsched.id);
						}
					}
					else{

					}
				});
			}
			function getTeacherPeformance(id){
				$("#loaderDiv").show("slow", function() {
					getOperation('@Configuration["WebApi:ClientBaseUrl"]' + `/api/teacher/Performance/`+id+``,`@strtoken`,`@Html.Raw(@userParamkey)`)
											.then(childresponse => {
												 setGradeBindingValues(JSON.parse(childresponse.strResult));
												  $("#loaderDiv").hide();
											})
											.catch(error => {
															console.log(error);
												 toastr.error(`@_localization.Getkey("Error")`);
											});
				});
			}
		 function setGradeBindingValues1(data) {
			$('#performance-container').empty();

			data.forEach(item => {

				const card = document.createElement('div');
				card.className = "card card-style mb-2 custom-card rounded-2 d-flex flex-column";

				const subcard = document.createElement('div');
				subcard.className = "content mt-2 mb-2 flex-grow-1";

				const teacherDiv = document.createElement('span');
				teacherDiv.innerHTML = item.TeacherName;
				teacherDiv.className = "me-3";
				teacherDiv.style.maxWidth = "100px";
				teacherDiv.style.overflow = "hidden";
				teacherDiv.style.textOverflow = "ellipsis";
				teacherDiv.style.whiteSpace = "nowrap";
				teacherDiv.style.fontSize = "14px";
				subcard.appendChild(teacherDiv);

				const subsubcard = document.createElement('div');
				subsubcard.className = "d-flex flex-wrap justify-content-start align-items-start"; // Ensure horizontal wrap

				for (let key in item) {
					if (item.hasOwnProperty(key) && key !== 'TeacherId' && key !== 'ScheduleId' && key !== 'TeacherName') {

						var mixcolvalue = `${key}`;
						let parts = mixcolvalue.split('&');

						// Create the label (header) element
						const dynamicLabel = document.createElement('span');
						dynamicLabel.innerHTML = parts[0];
						dynamicLabel.className = "font-weight-bold d-block text-center";  // Added d-block to force label above value
						dynamicLabel.style.fontSize = "12px";
						dynamicLabel.style.minWidth = "40px";
					   // dynamicLabel.style.maxWidth = "70px";
						dynamicLabel.style.whiteSpace = "nowrap";

						// Create the value element
						const dynamicSpan = document.createElement('span');
						dynamicSpan.innerHTML = item[key];
						dynamicSpan.className = "badge font-xl py-2 px-3 d-block text-center"; // d-block to force value below label
						dynamicSpan.style.marginTop = "4px"; // Added margin-top for spacing between label and value
						dynamicSpan.style.maxWidth = "50px";
						dynamicSpan.style.textAlign = "center";
						dynamicSpan.style.padding = "4px 8px";
						dynamicSpan.style.fontSize = "12px";
						dynamicSpan.style.backgroundColor = parts[1] || "gray";

						// Wrap each label and value pair
						const labelAndValueWrapper = document.createElement('div');
						labelAndValueWrapper.className = "d-flex flex-column align-items-center me-2 mb-2"; // Flex column for each pair, aligned center
						labelAndValueWrapper.appendChild(dynamicLabel);
						labelAndValueWrapper.appendChild(dynamicSpan);

						subsubcard.appendChild(labelAndValueWrapper);
					}
				}
				subcard.appendChild(subsubcard);
				card.appendChild(subcard);
				$('#performance-container').append(card);
			});
		}

		function setGradeBindingValues(data) {
			// Empty the container first
			$('#performance-container').empty();

			// Create the table structure with headers dynamically
			const table = document.createElement('table');
			table.id = "performanceTable";
			table.className = "table table-sm table-bordered dt-responsive nowrap w-100";

			// Create table header (thead)
			const thead = document.createElement('thead');
			const headerRow = document.createElement('tr');

			// Get the keys for columns (first row's keys are the headers)
			if (data.length > 0) {
				const firstItem = data[0];
				const columns = []; // To store the headers for DataTable configuration
				for (let key in firstItem) {
					if (firstItem.hasOwnProperty(key) && key !== 'TeacherId' && key !== 'ScheduleId' && key !== 'TeacherName') {
						const th = document.createElement('th');
						let parts = key.split('&');  // Split the key at '&'
						th.innerHTML = parts[0];     // Use the first part as the column header
						headerRow.appendChild(th);
						columns.push({ data: key }); // Collect the column info for DataTable
					}
				}

				// Add Teacher Name as the first column header
				const teacherHeader = document.createElement('th');
				teacherHeader.innerHTML = 'Teacher Name';
				headerRow.insertBefore(teacherHeader, headerRow.firstChild);  // Insert as the first column
				columns.unshift({ data: 'TeacherName' }); // Add TeacherName to the columns config at the beginning

				thead.appendChild(headerRow);
				table.appendChild(thead);

				// Create table body (tbody)
				const tbody = document.createElement('tbody');

				// Loop through the data and create rows
				data.forEach(item => {
					const row = document.createElement('tr');

					// Add TeacherName to the first cell
					const teacherCell = document.createElement('td');
					teacherCell.innerHTML = item.TeacherName;
					row.appendChild(teacherCell);

					// Add data for other columns
					for (let key in item) {
						if (item.hasOwnProperty(key) && key !== 'TeacherId' && key !== 'ScheduleId' && key !== 'TeacherName') {
							const td = document.createElement('td');
							let parts = key.split('&');  // Split the key at '&'
							td.innerHTML = item[key];    // Set the value from the data

							// Apply background color based on the second part after '&' if it exists
							if (parts.length > 1) {
								//td.style.backgroundColor = parts[1];  // Set background color
								td.setAttribute('data-bg-color', parts[1]);
							}

							row.appendChild(td);
						}
					}
					tbody.appendChild(row);
				});

				table.appendChild(tbody);

				// Append the table to the container
				$('#performance-container').append(table);

				// Destroy the previous DataTable instance if it exists
				if ($.fn.dataTable.isDataTable('#performanceTable')) {
					$('#performanceTable').DataTable().clear().destroy();
				}

				// Initialize the DataTable with explicit column definitions
				$('#performanceTable').DataTable({
					paging: true,        // Enable pagination
					searching: true,     // Enable search
					ordering: true,      // Enable ordering/sorting of columns
					info: true,          // Show table info (e.g., "Showing 1 to 10 of 50 entries")
					responsive: true,    // Make it responsive (especially useful on mobile)
					columns: columns,     // Explicitly define the columns for DataTable
					rowCallback: function(row, data, index) {
					// Loop through each cell in the row
						$(row).find('td').each(function() {
							// Get the background color from the custom data attribute
							const bgColor = $(this).data('bg-color');
							if (bgColor) {
								//$(this).css('background-color', bgColor);
								$(this).attr('style', 'background-color:' + bgColor + ' !important; color: white !important;');
							}
						});
					}

				});
			}
		}











	</script>
}
